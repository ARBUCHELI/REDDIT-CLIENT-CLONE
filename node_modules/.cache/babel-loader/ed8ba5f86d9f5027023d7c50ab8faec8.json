{"ast":null,"code":"import { createSlice, createSelector } from '@reduxjs/toolkit';\nimport { getSubredditPosts, getPostComments } from '../api/reddit';\nconst initialState = {\n  posts: [],\n  error: false,\n  isLoading: false,\n  searchTerm: '',\n  selectedSubreddit: '/r/mildlyinfuriating/'\n};\nconst redditSlice = createSlice({\n  name: 'redditPosts',\n  initialState,\n  reducers: {\n    setPosts(state, action) {\n      state.posts = action.payload;\n    },\n    startGetPosts(state) {\n      state.isLoading = true;\n      state.error = false;\n    },\n    getPostsSuccess(state, action) {\n      state.isLoading = false;\n      state.posts = action.payload;\n    },\n    getPostsFailed(state) {\n      state.isLoading = false;\n      state.error = true;\n    },\n    setSearchTerm(state, action) {\n      state.searchTerm = action.payload;\n    },\n    setSelectedSubreddit(state, action) {\n      state.selectedSubreddit = action.payload;\n      state.searchTerm = '';\n    },\n    toggleShowingComments(state, action) {\n      state.posts[action.payload].showingComments = !state.posts[action.payload].showingComments;\n    },\n    startGetComments(state, action) {\n      // If we're hiding comment, don't fetch the comments.\n      state.posts[action.payload].showingComments = !state.posts[action.payload].showingComments;\n      if (!state.posts[action.payload].showingComments) {\n        return;\n      }\n      state.posts[action.payload].loadingComments = true;\n      state.posts[action.payload].error = false;\n    },\n    getCommentsSuccess(state, action) {\n      state.posts[action.payload.index].loadingComments = false;\n      state.posts[action.payload.index].comments = action.payload.comments;\n    },\n    getCommentsFailed(state, action) {\n      state.posts[action.payload].loadingComments = false;\n      state.posts[action.payload].error = true;\n    }\n  }\n});\nexport const {\n  setPosts,\n  getPostsFailed,\n  getPostsSuccess,\n  startGetPosts,\n  setSearchTerm,\n  setSelectedSubreddit,\n  toggleShowingComments,\n  getCommentsFailed,\n  getCommentsSuccess,\n  startGetComments\n} = redditSlice.actions;\nexport default redditSlice.reducer;\n\n// This is a Redux Thunk that gets posts from a subreddit.\nexport const fetchPosts = subreddit => async dispatch => {\n  try {\n    dispatch(startGetPosts());\n    const posts = await getSubredditPosts(subreddit);\n\n    // We are adding showingComments and comments as additional fields to handle showing them when the user wants to. We need to do this because we need to call another API endpoint to get the comments for each post.\n    const postsWithMetadata = posts.map(post => ({\n      ...post,\n      showingComments: false,\n      comments: [],\n      loadingComments: false,\n      errorComments: false\n    }));\n    dispatch(getPostsSuccess(postsWithMetadata));\n  } catch (error) {\n    dispatch(getPostsFailed());\n  }\n};\nexport const fetchComments = (index, permalink) => async dispatch => {\n  try {\n    dispatch(startGetComments(index));\n    const comments = await getPostComments(permalink);\n    dispatch(getCommentsSuccess({\n      index,\n      comments\n    }));\n  } catch (error) {\n    dispatch(getCommentsFailed(index));\n  }\n};\nconst selectPosts = state => state.reddit.posts;\nconst selectSearchTerm = state => state.reddit.searchTerm;\nexport const selectSelectedSubreddit = state => state.reddit.selectedSubreddit;\nexport const selectFilteredPosts = createSelector([selectPosts, selectSearchTerm], (posts, searchTerm) => {\n  if (searchTerm !== '') {\n    return posts.filter(post => post.title.toLowerCase().includes(searchTerm.toLowerCase()));\n  }\n  return posts;\n});","map":{"version":3,"names":["createSlice","createSelector","getSubredditPosts","getPostComments","initialState","posts","error","isLoading","searchTerm","selectedSubreddit","redditSlice","name","reducers","setPosts","state","action","payload","startGetPosts","getPostsSuccess","getPostsFailed","setSearchTerm","setSelectedSubreddit","toggleShowingComments","showingComments","startGetComments","loadingComments","getCommentsSuccess","index","comments","getCommentsFailed","actions","reducer","fetchPosts","subreddit","dispatch","postsWithMetadata","map","post","errorComments","fetchComments","permalink","selectPosts","reddit","selectSearchTerm","selectSelectedSubreddit","selectFilteredPosts","filter","title","toLowerCase","includes"],"sources":["C:/Users/Andres R. Bucheli/Desktop/reddit-client-clone/src/store/redditSlice.js"],"sourcesContent":["import { createSlice, createSelector } from '@reduxjs/toolkit';\nimport { getSubredditPosts, getPostComments } from '../api/reddit';\n\nconst initialState = {\n  posts: [],\n  error: false,\n  isLoading: false,\n  searchTerm: '',\n  selectedSubreddit: '/r/mildlyinfuriating/',\n};\n\nconst redditSlice = createSlice({\n  name: 'redditPosts',\n  initialState,\n  reducers: {\n    setPosts(state, action) {\n      state.posts = action.payload;\n    },\n    startGetPosts(state) {\n      state.isLoading = true;\n      state.error = false;\n    },\n    getPostsSuccess(state, action) {\n      state.isLoading = false;\n      state.posts = action.payload;\n    },\n    getPostsFailed(state) {\n      state.isLoading = false;\n      state.error = true;\n    },\n    setSearchTerm(state, action) {\n      state.searchTerm = action.payload;\n    },\n    setSelectedSubreddit(state, action) {\n      state.selectedSubreddit = action.payload;\n      state.searchTerm = '';\n    },\n    toggleShowingComments(state, action) {\n      state.posts[action.payload].showingComments = !state.posts[action.payload]\n        .showingComments;\n    },\n    startGetComments(state, action) {\n      // If we're hiding comment, don't fetch the comments.\n      state.posts[action.payload].showingComments = !state.posts[action.payload]\n        .showingComments;\n      if (!state.posts[action.payload].showingComments) {\n        return;\n      }\n      state.posts[action.payload].loadingComments = true;\n      state.posts[action.payload].error = false;\n    },\n    getCommentsSuccess(state, action) {\n      state.posts[action.payload.index].loadingComments = false;\n      state.posts[action.payload.index].comments = action.payload.comments;\n    },\n    getCommentsFailed(state, action) {\n      state.posts[action.payload].loadingComments = false;\n      state.posts[action.payload].error = true;\n    },\n  },\n});\n\nexport const {\n  setPosts,\n  getPostsFailed,\n  getPostsSuccess,\n  startGetPosts,\n  setSearchTerm,\n  setSelectedSubreddit,\n  toggleShowingComments,\n  getCommentsFailed,\n  getCommentsSuccess,\n  startGetComments,\n} = redditSlice.actions;\n\nexport default redditSlice.reducer;\n\n// This is a Redux Thunk that gets posts from a subreddit.\nexport const fetchPosts = (subreddit) => async (dispatch) => {\n  try {\n    dispatch(startGetPosts());\n    const posts = await getSubredditPosts(subreddit);\n\n    // We are adding showingComments and comments as additional fields to handle showing them when the user wants to. We need to do this because we need to call another API endpoint to get the comments for each post.\n    const postsWithMetadata = posts.map((post) => ({\n      ...post,\n      showingComments: false,\n      comments: [],\n      loadingComments: false,\n      errorComments: false,\n    }));\n    dispatch(getPostsSuccess(postsWithMetadata));\n  } catch (error) {\n    dispatch(getPostsFailed());\n  }\n};\n\nexport const fetchComments = (index, permalink) => async (dispatch) => {\n  try {\n    dispatch(startGetComments(index));\n    const comments = await getPostComments(permalink);\n    dispatch(getCommentsSuccess({ index, comments }));\n  } catch (error) {\n    dispatch(getCommentsFailed(index));\n  }\n};\n\nconst selectPosts = (state) => state.reddit.posts;\nconst selectSearchTerm = (state) => state.reddit.searchTerm;\nexport const selectSelectedSubreddit = (state) =>\n  state.reddit.selectedSubreddit;\n\nexport const selectFilteredPosts = createSelector(\n  [selectPosts, selectSearchTerm],\n  (posts, searchTerm) => {\n    if (searchTerm !== '') {\n      return posts.filter((post) =>\n        post.title.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    }\n\n    return posts;\n  }\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}