{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getSubreddits } from '../api/reddit';\nconst initialState = {\n  subreddits: [],\n  error: false,\n  isLoading: false\n};\nconst subRedditSlice = createSlice({\n  name: 'subreddits',\n  initialState,\n  reducers: {\n    startGetSubreddits(state) {\n      state.isLoading = true;\n      state.error = false;\n    },\n    getSubredditsSuccess(state, action) {\n      state.isLoading = false;\n      state.subreddits = action.payload;\n    },\n    getSubredditsFailed(state) {\n      state.isLoading = false;\n      state.error = true;\n    }\n  }\n});\nexport const {\n  getSubredditsFailed,\n  getSubredditsSuccess,\n  startGetSubreddits\n} = subRedditSlice.actions;\nexport default subRedditSlice.reducer;\n\n// This is a Redux Thunk that gets subreddits.\nexport const fetchSubreddits = () => async dispatch => {\n  try {\n    dispatch(startGetSubreddits());\n    const subreddits = await getSubreddits();\n    dispatch(getSubredditsSuccess(subreddits));\n  } catch (error) {\n    dispatch(getSubredditsFailed());\n  }\n};\nexport const selectSubreddits = state => state.subreddits.subreddits;","map":{"version":3,"names":["createSlice","getSubreddits","initialState","subreddits","error","isLoading","subRedditSlice","name","reducers","startGetSubreddits","state","getSubredditsSuccess","action","payload","getSubredditsFailed","actions","reducer","fetchSubreddits","dispatch","selectSubreddits"],"sources":["C:/Users/Andres R. Bucheli/Desktop/reddit-client-clone/src/store/subRedditSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { getSubreddits } from '../api/reddit';\n\nconst initialState = {\n  subreddits: [],\n  error: false,\n  isLoading: false,\n};\n\nconst subRedditSlice = createSlice({\n  name: 'subreddits',\n  initialState,\n  reducers: {\n    startGetSubreddits(state) {\n      state.isLoading = true;\n      state.error = false;\n    },\n    getSubredditsSuccess(state, action) {\n      state.isLoading = false;\n      state.subreddits = action.payload;\n    },\n    getSubredditsFailed(state) {\n      state.isLoading = false;\n      state.error = true;\n    },\n  },\n});\n\nexport const {\n  getSubredditsFailed,\n  getSubredditsSuccess,\n  startGetSubreddits,\n} = subRedditSlice.actions;\n\nexport default subRedditSlice.reducer;\n\n// This is a Redux Thunk that gets subreddits.\nexport const fetchSubreddits = () => async (dispatch) => {\n  try {\n    dispatch(startGetSubreddits());\n    const subreddits = await getSubreddits();\n    dispatch(getSubredditsSuccess(subreddits));\n  } catch (error) {\n    dispatch(getSubredditsFailed());\n  }\n};\n\nexport const selectSubreddits = (state) => state.subreddits.subreddits;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,aAAa,QAAQ,eAAe;AAE7C,MAAMC,YAAY,GAAG;EACnBC,UAAU,EAAE,EAAE;EACdC,KAAK,EAAE,KAAK;EACZC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,cAAc,GAAGN,WAAW,CAAC;EACjCO,IAAI,EAAE,YAAY;EAClBL,YAAY;EACZM,QAAQ,EAAE;IACRC,kBAAkBA,CAACC,KAAK,EAAE;MACxBA,KAAK,CAACL,SAAS,GAAG,IAAI;MACtBK,KAAK,CAACN,KAAK,GAAG,KAAK;IACrB,CAAC;IACDO,oBAAoBA,CAACD,KAAK,EAAEE,MAAM,EAAE;MAClCF,KAAK,CAACL,SAAS,GAAG,KAAK;MACvBK,KAAK,CAACP,UAAU,GAAGS,MAAM,CAACC,OAAO;IACnC,CAAC;IACDC,mBAAmBA,CAACJ,KAAK,EAAE;MACzBA,KAAK,CAACL,SAAS,GAAG,KAAK;MACvBK,KAAK,CAACN,KAAK,GAAG,IAAI;IACpB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXU,mBAAmB;EACnBH,oBAAoB;EACpBF;AACF,CAAC,GAAGH,cAAc,CAACS,OAAO;AAE1B,eAAeT,cAAc,CAACU,OAAO;;AAErC;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EACvD,IAAI;IACFA,QAAQ,CAACT,kBAAkB,CAAC,CAAC,CAAC;IAC9B,MAAMN,UAAU,GAAG,MAAMF,aAAa,CAAC,CAAC;IACxCiB,QAAQ,CAACP,oBAAoB,CAACR,UAAU,CAAC,CAAC;EAC5C,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdc,QAAQ,CAACJ,mBAAmB,CAAC,CAAC,CAAC;EACjC;AACF,CAAC;AAED,OAAO,MAAMK,gBAAgB,GAAIT,KAAK,IAAKA,KAAK,CAACP,UAAU,CAACA,UAAU"},"metadata":{},"sourceType":"module"}